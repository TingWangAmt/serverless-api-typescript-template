# For full config options, check the docs:
#    docs.serverless.com
service: serverless-template 

plugins:
  - serverless-appsync-plugin
  - serverless-plugin-typescript
  - serverless-pseudo-parameters
  # - serverless-dynamodb-local
  - serverless-offline
  # - aws-amplify-serverless-plugin

provider:
  name: aws
  runtime: nodejs14.x
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}
  role: arn:aws:iam::388865528159:role/serverless-template-dev-ap-northeast-1-lambdaRole
  vpc:
    securityGroupIds:
      - sg-0c66673331d7e786a
    subnetIds:
      - subnet-063bc89ddcd0d099f
      - subnet-08a3b69654a268e63
      - subnet-0c34570ad93f2ebb7
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

custom:
  stage: ${opt:stage, 'dev'}
  output:
    file: .serverless/output.json
  dynamodb:
    stage:
      - dev
      - offline
    start:
      port: 8000
  #     inMemory: true
  #     migrate: true
  #   migration:
  #     dir: offline/migrations
  appSync:
    # AppSync API の名前
    name: userinfo_backend
    # 認証方式　今回は Cognito を使用する
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ap-northeast-1
      defaultAction: ALLOW
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ${opt:stage, self:provider.stage}_user
        description: user管理テーブル
        config:
          tableName: test
          region: ap-northeast-1
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
        # リゾルバーの方を指定します
      - type: Query
        # リゾルバーを紐づけるスキーマ中のフィールド名を指定します
        field: name
        # Pipeline Resolverを使い場合、以下を指定します
        kind: PIPELINE
        # リクエストマッピングテンプレートのファイルパスを指定します
        # ファイルパスはmappingTemplatesLocationで指定したパスからの相対パスになります
        request: 'start.vtl'
        # # レスポンスマッピングテンプレートのファイルパスを指定します
        response: 'end.vtl'
        # リゾルバーで使う関数を実行順に指定します
        functions:
          - GetUser
    functionConfigurations:
        # ユーザー一覧取得
        # 関数で扱うデータソース名を指定します
      - dataSource: dynamo_user
        # 関数名を指定します
        name: 'GetUser'
        # 関数のリクエストマッピングテンプレートのファイルパスを指定します
        # ファイルパスはmappingTemplatesLocationで指定したパスからの相対パスになります
        request: 'GetUser.req.vtl'
        # 関数のレスポンスマッピングテンプレートのファイルパスを指定します
        response: 'GetUser.res.vtl'

package:
  exclude:
    - node_modules/**
  include:
    - serverless.yml
    - .serverless/**

resources:
  Outputs:
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  # Resources:
  #   TodosDynamoDbTable:
  #     Type: 'AWS::DynamoDB::Table'
  #     DeletionPolicy: Retain
  #     Properties:
  #       AttributeDefinitions:
  #         -
  #           AttributeName: name
  #           AttributeType: S
  #       KeySchema:
  #         -
  #           AttributeName: name
  #           KeyType: HASH
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 1
  #         WriteCapacityUnits: 1
  #       TableName: ${self:provider.environment.DYNAMODB_TABLE}

functions:
  pgCheck:
    handler: src/functions/pgCheck.list
    role: arn:aws:iam::388865528159:role/serverless-template-dev-ap-northeast-1-lambdaRole
    description: posrgre crud
    events:
      - http:
          path: pg
          method: get
          # cors: 
          #   origin:
          #     # - '*'
          #     # - "https://master.d2w7htrom5yxv0.amplifyapp.com"
          #     # - "https://dev.d10apifivscxf5.amplifyapp.com"
          #     - "http://localhost:3000"
          #   headers: 
          #     - Content-Type
          #     - Origin
          #     - Authorization
          #     - Accept
          #     - X-Requested-With
          #   allowCredentials: true
  #         layers:
  #           - "arn:aws:lambda:ap-northeast-1:388865528159:layer:pg-sequelize:4"
  healthcheck:
    handler: src/functions/healthcheck.healthcheck
    description: aws:states:opt-out
    events:
      - http:
          path: healthcheck
          method: get
          # cors: 
          #   method: 
          #     - get
            # origin:
            #   # - '*'
            #   # - "https://master.d2w7htrom5yxv0.amplifyapp.com"
            #   # - "https://dev.d10apifivscxf5.amplifyapp.com"
            #   - "http://localhost:3000"
            # headers: 
            #   - Content-Type
            #   - Origin
            #   - Authorization
            #   - X-Api-Key
            #   - Accept
            #   - X-Requested-With
            # allowCredentials: true
